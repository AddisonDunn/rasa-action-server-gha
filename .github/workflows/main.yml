name: Continuous Integration
on:
  push:
    branches:
    - master
    tags:
    - '*'
  pull_request:

jobs:
  test_action:
    runs-on: ubuntu-latest
    name: Test GH action
    steps:
    - uses: actions/checkout@v2
    - id: action
      name: Build an action server
      uses: ./
      with:
        actions_directory: 'examples/actions'
        docker_registry: 'docker.pkg.github.com'
        docker_image_name: 'rasahq/action-server-gha/test-image'
        docker_registry_login: ${{ github.actor }}
        docker_registry_password: ${{ secrets.GITHUB_TOKEN }}
        docker_image_tag: ${{ github.sha }}
        dockerfile: 'examples/Dockerfile'
        requirements_file: 'examples/requirements.txt'

    - name: Check output - docker_image_name
      if: steps.action.outputs.docker_image_name != 'docker.pkg.github.com/rasahq/action-server-gha/test-image'
      run: echo "::error::docker_image_name=${{ steps.action.outputs.docker_image_name }}" && exit 1

    - name: Check output - docker_image_tag
      if: steps.action.outputs.docker_image_tag != github.sha
      run: echo "::error::docker_image_tag=${{ steps.action.outputs.docker_image_tag }} != ${{ github.sha }}" && exit 1

    - name: Check output - docker_image_full_name
      if: steps.action.outputs.docker_image_full_name != format('docker.pkg.github.com/rasahq/action-server-gha/test-image:{0}', github.sha)
      run: echo "::error::docker_image_full_name=${{ steps.action.outputs.docker_image_full_name }} != ${{ format('docker.pkg.github.com/rasahq/action-server-gha/test-image:{0}', github.sha) }}" && exit 1

    - name: Pull image and run actions
      run: |
        # Make sure that the docker image doesn't exists in local cache
        DOCKER_IMAGE_ID=$(docker images -q ${{ steps.action.outputs.docker_image_name }})
        docker rmi $DOCKER_IMAGE_ID

        docker pull ${{ steps.action.outputs.docker_image_full_name }}
        docker run -p 5055:5055 --name actions -d ${{ steps.action.outputs.docker_image_full_name }}
        docker ps -a --filter 'name=actions'

        until test -n "$(curl -s http://localhost:5055/health | jq -r  '. | select(.status=="ok") | .status')"; do
          echo "Waiting for the action server"; sleep 1
        done

        docker logs actions

    - name: Check if Action Server contains expected actions
      run: |
        curl -s http://localhost:5055/actions | jq .
        test -n "$(curl -s http://localhost:5055/actions | jq -r '.[] | select(.name=="action_search_concerts") | .name')"
        test -n "$(curl -s http://localhost:5055/actions | jq -r '.[] | select(.name=="action_search_venues") | .name')"
        test -n "$(curl -s http://localhost:5055/actions | jq -r '.[] | select(.name=="action_show_concert_reviews") | .name')"
        test -n "$(curl -s http://localhost:5055/actions | jq -r '.[] | select(.name=="action_show_venue_reviews") | .name')"

    - name: Install graphqurl
      run: sudo npm install -g graphqurl

    - name: Get the package ID
      id: get_package_id
      run: |
        # Get the package ID
        PACKAGE_ID=$(graphqurl https://api.github.com/graphql -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
          --queryFile=.github/get-package-id.graphql -v 'name=action-server-gha' -v 'owner=${{ github.repository_owner }}' \
          -v 'package_name=test-image' -v 'package_version=${{ github.sha }}'  --format=json | jq -r .data.repository.packages.edges[].node.version.id)

        echo "::set-output name=package_id::${PACKAGE_ID}"

    - name: Delete the Docker image
      uses: actions/delete-package-versions@v1
      with:
        package-version-ids: ${{ steps.get_package_id.outputs.package_id }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test_action
    if: startsWith(github.event.ref, 'refs/tags')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get release version
        id: release_version
        run: |
          sed -e 's/_version_/'${GITHUB_REF#refs/tags/}'/g' package.json.tmp > package.json
          echo "::set-output name=version::${GITHUB_REF#refs/tags/}"

      - name: Changelog
        uses: scottbrenner/generate-changelog-action@1.0.1
        id: changelog
        env:
          REPO: ${{ github.repository }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_version.outputs.version }}
          release_name: Release ${{ steps.release_version.outputs.version }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
